import { InferenceClient } from "@huggingface/inference";
import TelegramBot from "node-telegram-bot-api";
import axios from "axios";
import fs from "fs";
import schedule from "node-schedule";

// === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
import dotenv from "dotenv";
dotenv.config();

// === –¢–û–ö–ï–ù–´ –ò ID –ö–ê–ù–ê–õ–ê ===
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const HUGGINGFACE_API_KEY = process.env.HUGGINGFACE_API_KEY;
const UNSPLASH_ACCESS_KEY = process.env.UNSPLASH_ACCESS_KEY;
const CHANNEL_ID = process.env.CHANNEL_ID 
const MODEL_NAME = process.env.MODEL_NAME || "deepseek-ai/DeepSeek-V3-0324";

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, {
    polling: true
});

// === –ß—Ç–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –∏ —Ç–µ–º ===
let tracks = [];
let topics = [];

try {
    tracks = JSON.parse(fs.readFileSync("tracks.json"));
    topics = JSON.parse(fs.readFileSync("topics.json"));
} catch (e) {
    console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ tracks.json –∏–ª–∏ topics.json");
    process.exit(1);
}

// === –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–º ===
const USED_TOPICS_FILE = "used_topics.json";

function getUsedTopics() {
    if (!fs.existsSync(USED_TOPICS_FILE)) return [];
    return JSON.parse(fs.readFileSync(USED_TOPICS_FILE));
}

function saveUsedTopic(topic) {
    let used = getUsedTopics();
    used.push(topic);
    fs.writeFileSync(USED_TOPICS_FILE, JSON.stringify(used, null, 2));
}

function getRandomUnusedTopic() {
    const used = getUsedTopics();
    const available = topics.filter((t) => !used.includes(t));
    if (available.length === 0) {
        fs.writeFileSync(USED_TOPICS_FILE, "[]");
        return topics[Math.floor(Math.random() * topics.length)];
    }
    return available[Math.floor(Math.random() * available.length)];
}

// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ —Ä—ç–ø ===
const hfClient = new InferenceClient( `${HUGGINGFACE_API_KEY}`);

async function generateRapPost(topic) {
    try {
        const response = await hfClient.chatCompletion({
            model: MODEL_NAME,
            messages: [
                {
                    role: "user",
                    content: `–ù–∞–ø–∏—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–æ—Å—Ç –ø—Ä–æ —Ä—ç–ø –Ω–∞ —Ç–µ–º—É: "${topic}"`,
                },
            ],
            max_tokens: 300,
            temperature: 0.8,
        });

        return response.choices[0].message.content.trim();
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", err.message);
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞.";
    }
}

// === –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ ===
function getRandomTrack() {
    return tracks[Math.floor(Math.random() * tracks.length)];
}

// === –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å Unsplash ===
async function getRandomImageUrl() {
    const UNSPLASH_URL = "https://api.unsplash.com/photos/random";
    const params = {
        query: "music hiphop rhythm beats",
        client_id: UNSPLASH_ACCESS_KEY,
        orientation: "landscape",
    };

    try {
        const response = await axios.get(UNSPLASH_URL, { params });
        return response.data.urls.regular;
    } catch (error) {
        console.error("üñºÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:", error.message);
        return "https://images.unsplash.com/photo-1519389950473-47ba0277781c?ixlib=rb-4.0.3&auto=format&w=600&q=60";
    }
}

// === –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram –∫–∞–Ω–∞–ª–µ ===
async function postToChannel() {
    const topic = getRandomUnusedTopic();
    console.log(`üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –Ω–∞ —Ç–µ–º—É: "${topic}"`);

    const postText = await generateRapPost(topic);
    const track = getRandomTrack();
    const imageUrl = await getRandomImageUrl();

    console.log("üì¨ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª...");

    try {
        await bot.sendPhoto(CHANNEL_ID, imageUrl);
        await bot.sendMessage(CHANNEL_ID, postText);
        await bot.sendMessage(
            CHANNEL_ID,
            `üéß –°–ª—É—à–∞–π –º–æ–π –Ω–æ–≤—ã–π —Ç—Ä–µ–∫:\n${track.title}\n${track.link}`
        );
        saveUsedTopic(topic);
        console.log("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!");
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", error.message);
    }
}

// === –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é ===
const mainMenuOptions = {
    reply_markup: {
        inline_keyboard: [
            [{ text: "üé§ –°–æ–≤–µ—Ç –ø–æ Flow", callback_data: "flow_advice" }],
            [{ text: "üìù –ö–∞–∫ –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç—ã", callback_data: "writing_tips" }],
            [{ text: "üí¨ –ò–¥–µ–∏ –¥–ª—è —Ä–∏—Ñ–º", callback_data: "rhyme_ideas" }],
            [{ text: "üéß –¢–æ–ø —Ç—Ä–µ–∫–æ–≤", callback_data: "top_tracks" }],
        ],
    },
};

bot.onText(/\/menu/, async (msg) => {
    const chatId = msg.chat.id;
    await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å:", mainMenuOptions);
});

bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    await bot.sendMessage(chatId, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –¥–∞—Ç—å —Ç–µ–±–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Ä—ç–ø—É, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã –∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª.");
});

bot.onText(/\/advice/, async (msg) => {
    const advice = await getFlowAdvice();
    await bot.sendMessage(msg.chat.id, advice);
});

bot.on("callback_query", async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;

    let response = "";

    switch (data) {
        case "flow_advice":
            response = await getFlowAdvice();
            break;
        case "writing_tips":
            response = await getWritingTips();
            break;
        case "rhyme_ideas":
            response = await getRhymeIdeas();
            break;
        case "top_tracks":
            response = `üéß –í–æ—Ç —Ç–æ–ø —Ç—Ä–µ–∫–æ–≤:\n${tracks.map((t) => `- ${t.title} ‚Üí ${t.link}`).join("\n")}`;
            break;
        default:
            response = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.";
    }

    await bot.sendMessage(chatId, response);
});

// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–≤–µ—Ç–æ–≤ ===
async function getFlowAdvice() {
    return generateAIResponse("–î–∞–π —Å–æ–≤–µ—Ç –Ω–∞—á–∏–Ω–∞—é—â–µ–º—É —Ä—ç–ø–µ—Ä—É –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ flow.");
}

async function getWritingTips() {
    return generateAIResponse("–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—á–∞—Ç—å –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç—ã –∫ –ø–µ—Å–Ω—è–º? –°–æ–≤–µ—Ç—ã –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤.");
}

async function getRhymeIdeas() {
    return generateAIResponse("–ü—Ä–∏–¥—É–º–∞–π 5 —Å—Ç—Ä–æ–∫ —Å —Ä–∏—Ñ–º–æ–π –Ω–∞ —Å–ª–æ–≤–æ '–Ω–æ—á—å'.");
}

// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI-–æ—Ç–≤–µ—Ç–∞ ===
async function generateAIResponse(prompt) {
    try {
        const response = await hfClient.chatCompletion({
            model: MODEL_NAME,
            messages: [{ role: "user", content: prompt }],
            max_tokens: 150,
        });

        return response.choices[0].message.content;
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ HuggingFace:", err.message);
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞.";
    }
}

// === –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ ===
function loadAnalytics() {
    if (!fs.existsSync("analytics.json")) {
        fs.writeFileSync("analytics.json", JSON.stringify({ users: [], commands_used: { advice: 0, lyrics: 0 } }));
    }
    return JSON.parse(fs.readFileSync("analytics.json"));
}

function saveAnalytics(data) {
    fs.writeFileSync("analytics.json", JSON.stringify(data, null, 2));
}

// === –ö–æ–º–∞–Ω–¥–∞ /advice ===
bot.onText(/\/advice/, async (msg) => {
    const chatId = msg.chat.id;
    const analytics = loadAnalytics();

    if (!analytics.users.includes(chatId)) {
        analytics.users.push(chatId);
    }
    analytics.commands_used.advice += 1;
    saveAnalytics(analytics);

    const advice = await getFlowAdvice();
    await bot.sendMessage(chatId, advice);
});

// === –ö–æ–º–∞–Ω–¥–∞ /lyrics ===
bot.onText(/\/lyrics (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const theme = match[1];
    const analytics = loadAnalytics();

    if (!analytics.users.includes(chatId)) {
        analytics.users.push(chatId);
    }
    analytics.commands_used.lyrics += 1;
    saveAnalytics(analytics);

    const lyrics = await generateLyrics(theme);
    await bot.sendMessage(chatId, `üéµ –í–æ—Ç —Å—Ç—Ä–æ–∫–∏ –ø–æ —Ç–µ–º–µ "${theme}":\n\n${lyrics}`);
});

// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥ —Ç—Ä–µ–∫ ===
async function generateLyrics(theme) {
    try {
        const response = await hfClient.chatCompletion({
            model: MODEL_NAME,
            messages: [{ role: "user", content: `–ù–∞–ø–∏—à–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–µ–∫ —Ä—ç–ø–∞ –Ω–∞ —Ç–µ–º—É: ${theme}` }],
            max_tokens: 200,
        });

        return response.choices[0].message.content;
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:", err.message);
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç.";
    }
}

// === –ó–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (—Ä–∞–∑ –≤ –¥–µ–Ω—å –≤ 10:00) ===
console.log("‚è∞ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç...");
// schedule.scheduleJob("0 10 * * *", () => {
//     console.log("üïí –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç!");
//     postToChannel();
// });

// === –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===
postToChannel();
