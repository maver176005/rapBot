// === –ò–º–ø–æ—Ä—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ===
import { Bot } from "https://deno.land/x/grammy/mod.ts";
import { InferenceClient } from "npm:@huggingface/inference";
import axios from "https://deno.land/x/axiod/mod.ts";
import { load } from "https://deno.land/x/dotenv/mod.ts";
await load();
// === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
const TELEGRAM_BOT_TOKEN = Deno.env.get("TELEGRAM_BOT_TOKEN");
const HUGGINGFACE_API_KEY = Deno.env.get("HUGGINGFACE_API_KEY");
const UNSPLASH_ACCESS_KEY = Deno.env.get("UNSPLASH_ACCESS_KEY");
const CHANNEL_ID = Deno.env.get("CHANNEL_ID");
const MODEL_NAME = Deno.env.get("MODEL_NAME") || "deepseek-ai/DeepSeek-V3-0324";

if (!TELEGRAM_BOT_TOKEN) throw new Error("–ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN");

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Grammy ===
const bot = new Bot(TELEGRAM_BOT_TOKEN);

// === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ KV Storage –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ===
const kv = await Deno.openKv();

// === –ß—Ç–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –∏ —Ç–µ–º –∏–∑ KV –∏–ª–∏ fallback –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–∞–º ===
let tracks = [];
let topics = [];

try {
    const tracksEntry = await kv.get(["tracks"]);
    const topicsEntry = await kv.get(["topics"]);

    tracks = tracksEntry.value || JSON.parse(Deno.readTextFileSync("tracks.json"));
    topics = topicsEntry.value || JSON.parse(Deno.readTextFileSync("topics.json"));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ KV, —á—Ç–æ–±—ã –Ω–µ —á–∏—Ç–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑ —Ñ–∞–π–ª—ã
    await kv.set(["tracks"], tracks);
    await kv.set(["topics"], topics);
} catch (e) {
    console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ tracks.json –∏–ª–∏ topics.json", e.message);
    Deno.exit(1);
}

// === –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–º —á–µ—Ä–µ–∑ KV ===
async function getUsedTopics() {
    const entry = await kv.get(["used_topics"]);
    return entry.value || [];
}

async function saveUsedTopic(topic) {
    const used = await getUsedTopics();
    if (!used.includes(topic)) {
        used.push(topic);
        await kv.set(["used_topics"], used);
    }
}

async function getRandomUnusedTopic() {
    const used = await getUsedTopics();
    const available = topics.filter((t) => !used.includes(t));
    if (available.length === 0) {
        await kv.set(["used_topics"], []);
        return topics[Math.floor(Math.random() * topics.length)];
    }
    return available[Math.floor(Math.random() * available.length)];
}

// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ —Ä—ç–ø ===
const hfClient = new InferenceClient(HUGGINGFACE_API_KEY);

async function generateRapPost(topic) {
    try {
        const response = await hfClient.chatCompletion({
            model: MODEL_NAME,
            messages: [
                {
                    role: "user",
                    content: `–ù–∞–ø–∏—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–æ—Å—Ç –ø—Ä–æ —Ä—ç–ø –Ω–∞ —Ç–µ–º—É: "${topic}"`,
                },
            ],
            max_tokens: 300,
            temperature: 0.8,
        });

        return response.choices[0].message.content.trim();
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", err.message);
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞.";
    }
}

// === –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å Unsplash ===
async function getRandomImageUrl() {
    const UNSPLASH_URL = "https://api.unsplash.com/photos/random";
    const params = {
        query: "music hiphop rhythm beats",
        client_id: UNSPLASH_ACCESS_KEY,
        orientation: "landscape",
    };

    try {
        const response = await axios.get(UNSPLASH_URL, { params });
        return response.data.urls.regular;
    } catch (error) {
        console.error("üñºÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:", error.message);
        return "https://images.unsplash.com/photo-1519389950473-47ba0277781c?ixlib=rb-4.0.3&auto=format&w=600&q=60";
    }
}

// === –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram –∫–∞–Ω–∞–ª–µ ===
async function postToChannel() {
    const topic = await getRandomUnusedTopic();
    console.log(`üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –Ω–∞ —Ç–µ–º—É: "${topic}"`);

    const postText = await generateRapPost(topic);
    const track = tracks[Math.floor(Math.random() * tracks.length)];
    const imageUrl = await getRandomImageUrl();

    console.log("üì¨ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª...");

    try {
        await bot.api.sendPhoto(CHANNEL_ID, imageUrl);
        await bot.api.sendMessage(CHANNEL_ID, postText);
        await bot.api.sendMessage(
            CHANNEL_ID,
            `üéß –°–ª—É—à–∞–π –º–æ–π –Ω–æ–≤—ã–π —Ç—Ä–µ–∫:\n${track.title}\n${track.link}`
        );
        await saveUsedTopic(topic);
        console.log("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!");
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", error.message);
    }
}

// === –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ===
bot.command("start", async (ctx) => {
    await ctx.reply("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –¥–∞—Ç—å —Ç–µ–±–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Ä—ç–ø—É, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã –∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª.");
});

bot.command("menu", async (ctx) => {
    await ctx.reply("–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å:");
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
});

bot.command("advice", async (ctx) => {
    const analytics = await loadAnalytics();
    const chatId = ctx.chat.id;

    if (!analytics.users.includes(chatId)) {
        analytics.users.push(chatId);
    }

    analytics.commands_used.advice += 1;
    await saveAnalytics(analytics);

    const advice = await getFlowAdvice();
    await ctx.reply(advice);
});

bot.command("lyrics", async (ctx) => {
    const analytics = await loadAnalytics();
    const chatId = ctx.chat.id;
    const theme = ctx.match || "—Ä—ç–ø";

    if (!analytics.users.includes(chatId)) {
        analytics.users.push(chatId);
    }

    analytics.commands_used.lyrics += 1;
    await saveAnalytics(analytics);

    const lyrics = await generateLyrics(theme);
    await ctx.reply(`üéµ –í–æ—Ç —Å—Ç—Ä–æ–∫–∏ –ø–æ —Ç–µ–º–µ "${theme}":\n\n${lyrics}`);
});

// === –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ ===
async function loadAnalytics() {
    const entry = await kv.get(["analytics"]);
    const data = entry.value || { users: [], commands_used: { advice: 0, lyrics: 0 } };
    return data;
}

async function saveAnalytics(data) {
    await kv.set(["analytics"], data);
}

// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI-–æ—Ç–≤–µ—Ç–∞ ===
async function getFlowAdvice() {
    return await generateAIResponse("–î–∞–π —Å–æ–≤–µ—Ç –Ω–∞—á–∏–Ω–∞—é—â–µ–º—É —Ä—ç–ø–µ—Ä—É –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ flow.");
}

async function getWritingTips() {
    return await generateAIResponse("–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—á–∞—Ç—å –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç—ã –∫ –ø–µ—Å–Ω—è–º? –°–æ–≤–µ—Ç—ã –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤.");
}

async function getRhymeIdeas() {
    return await generateAIResponse("–ü—Ä–∏–¥—É–º–∞–π 5 —Å—Ç—Ä–æ–∫ —Å —Ä–∏—Ñ–º–æ–π –Ω–∞ —Å–ª–æ–≤–æ '–Ω–æ—á—å'.");
}

async function generateAIResponse(prompt) {
    try {
        const response = await hfClient.chatCompletion({
            model: MODEL_NAME,
            messages: [{ role: "user", content: prompt }],
            max_tokens: 150,
        });

        return response.choices[0].message.content;
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ HuggingFace:", err.message);
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞.";
    }
}

// === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
await bot.start();
console.log("‚è∞ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç...");

// –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
await postToChannel();